// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id          Int           @id @default(autoincrement())
  status      String        @default("waiting_confirmation")
  role        String        @default("user")
  firstName   String
  lastName    String
  birthdate   DateTime
  email       String        @unique
  username    String        @unique
  password    String
  Cart        Cart[]
  Save        Save[]
  Saved       Int[]
  Transaction Transaction[]
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
}

model Product {
  id              Int      @id @default(autoincrement())
  status          String   @default("pending")
  name            String
  categories      String[]
  price           Float
  quantityInStock Int
  description     String
  Cart            Cart[]
  Save            Save[]
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
}

model Cart {
  id        Int     @id @default(autoincrement())
  user      User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    Int
  product   Product @relation(fields: [productId], references: [id], onDelete: Cascade)
  productId Int
  quantity  Int
}

model Save {
  id        Int      @id @default(autoincrement())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    Int
  product   Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  productId Int
  createdAt DateTime @default(now())
}

model Transaction {
  id                 Int                  @id @default(autoincrement())
  status             String
  user               User?                 @relation(fields: [userId], references: [id], onDelete: SetNull)
  userId             Int?
  TransactionProduct TransactionProduct[]
  Payment            Payment[]
  createdAt          DateTime             @default(now())
}

model TransactionProduct {
  id            Int         @id @default(autoincrement())
  transaction   Transaction @relation(fields: [transactionId], references: [id], onDelete: Cascade)
  transactionId Int
  name          String
  categories    String[]
  description   String
  price         Float
  quantity      Int
  createdAt     DateTime    @default(now())
}

model Payment {
  id            Int         @id @default(autoincrement())
  method        String
  transaction   Transaction? @relation(fields: [transactionId], references: [id], onDelete: SetNull)
  transactionId Int?
  createdAt     DateTime    @default(now())
}
